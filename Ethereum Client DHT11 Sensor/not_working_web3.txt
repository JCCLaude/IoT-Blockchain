setInterval(all,15000);

var cnt_blockchain_send_temp = 0;
var cnt_blockchain_send_air = 0;
var air_limit = 95;
var temp_limit = 50;

const Web3 = require("web3");
const TemperatureEvent = require("./build/Temperature_Alarming.json");
const HumidityEvent = require("./build/Humidity_Alarming.json");


/*function for all*/
function all () {


        /*function to determine a value between realistic upper and
        lower limit value*/
        var CO2value = Math.round(Math.random() * (2000 - 200) + 200);
        var tempvalue = Math.round(Math.random() * (50 - 10) + 10);
        var airvalue = Math.round(Math.random() * (95 - 20) + 20);
        

var date = "";
var geo = "";

const { promisify } = require('util')
const sleep = promisify(setTimeout)
var buf="";


/*Starting a child process and running the Python script "measure_dht11_sensor.py"
to get the values of the DHT11 sensor. Values of the Python script are piped to stdout
and then used in this script.*/
function pycall() {
const { exec } = require('child_process');
const script = exec('python3 kkk.py', (error, stdout, stderr) =>
{
  if (error) { console.error(`error: ${error.message}`); return;
  }
  if (stderr) { console.error(`stderr: ${stderr}`); return;
  }
  buf = `${stdout}`;
script.kill('SIGINT');
});
}

pycall();

sleep(4000).then(() => {
        buf = buf.toString();
        buf = buf.split("'");
        tempvalue = parseInt(buf[3]);
        airvalue = parseInt(buf[7]);
        date = buf[11];
        geo = buf[15];

	if(tempvalue == 0 || tempvalue == "undefined") {tempvalue = "No Data"};
	if(airvalue == 0 || airvalue == "undefined") {airvalue = "No Data"};



const init = async () => {
  
  //connect to the local running blockchain (ganache)
  const web3 = new Web3("ws://192.168.178.33:7545"); 
  
  // get the contract information from the build folder
  const id = await web3.eth.net.getId();

  // make a transaction from one of the available accounts
  const accounts = await web3.eth.getAccounts();

  const deployedNetwork = TemperatureEvent.networks[id];
  const temperatureEvent = new web3.eth.Contract(
    TemperatureEvent.abi,
    deployedNetwork.address
  );

  if(cnt_blockchain_send_temp >= 1 || tempvalue >= temp_limit) {
     cnt_blockchain_send_temp = 0; //so every two loops
     const receipt = await temperatureEvent.methods
       .submit(date, tempvalue, geo)
       .send({ from: accounts[0], gasLimit: "6721975" });
   };
 }
  
  const deployedNetwork1 = HumidityEvent.networks[id];
  const humidityEvent = new web3.eth.Contract(
    HumidityEvent.abi,
    deployedNetwork1.address
  );

 if(cnt_blockchain_send_air >= 1 || airvalue >= air_limit) {
      cnt_blockchain_send_air = 0; //so every two loops
      const receipt1 = await humidityEvent.methods
        .submit(date, airvalue, geo)
        .send({ from: accounts[0], gasLimit: "6721975" });
    };
 }

 cnt_blockchain_send_temp += 1;
 cnt_blockchain_send_air += 1;

init();

 });


}


